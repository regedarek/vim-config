"conqueterm
let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_ReadUnfocused = 0
let g:ConqueTerm_Color = 1
let g:ConqueTerm_FastMode = 0
let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_CloseOnEnd = 1
let g:ConqueTerm_Syntax = 'conque'
let g:ConqueTerm_CWInsert = 1
let g:ConqueTerm_TERM = 'vt100'
"neocompl
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
"bonly.vim
nmap <leader>d :Bonly<CR>
"vim-notes
let g:notes_directory = '~/notes'
"vim-rspec
let g:default_cmd = "rspec"
map <leader>r :RunSpecLine<cr>
"ctags.vim
map <Leader>rt :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"ultisnips
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsDontReverseSearchPath="1"
let g:UltiSnipsListSnippets = '<S-Tab>'
"delimitMate
let delimitMate_visual_leader = ","
"gist-vim

"vim-powerline
let g:Powerline_symbols = 'fancy'

"tagbar.vim
let g:tagbar_left = 1
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
"ack.vim
map <leader>vv :execute ":Ack " . expand("<cword>")<CR>
map <leader>vc :execute ":QFDo %s/" . expand("<cword>") . "/" . ""
"ctrlp.vim
nmap bb :CtrlPBuffer<cr>
map \ :CtrlPMRU<cr>
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_mruf_relative = 1
let g:ctrlp_working_path_mode = 0
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_mruf_last_entered = 1
let g:ctrlp_prompt_mappings = {
  \ 'PrtSelectMove("j")': ['<s-k>', '<down>'],
  \ 'PrtSelectMove("k")': ['<s-j>', '<up>'],
  \ 'CreateNewFile()': ['<s-n>'],
  \ 'ToggleFocus()': ['<tab>'],
  \ 'ToggleByFname()': ['<c-d>'],
  \ 'ToggleType(1)': ['<c-f>', '<c-j>', '<c-up>'],
  \ 'ToggleType(-1)': ['<c-b>', '<c-k>', '<c-down>'],
  \ 'MarkToOpen()': ['<s-l>'],
  \ 'OpenMulti()': ['<s-D>'],
  \ }
let g:ctrlp_open_new_file = 0
let g:ctrlp_open_multi = 'vr'
let g:ctrlp_arg_map = 0
let g:ctrlp_jump_to_buffer = 1
let g:ctrlp_dotfiles = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_extensions = ['tag', 'buffertag']
"The-NERD-tree
let NERDTreeMinimalUI=1
nmap <silent> rr :NERDTreeToggle<cr>
nmap <silent> rf :NERDTreeFind<cr>
